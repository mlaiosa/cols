#!/usr/bin/env python

import sys, re, itertools

def is_integer(s):
	"""
	>>> is_integer("34")
	True
	>>> is_integer("0x1234abcd")
	True
	>>> is_integer("0644")
	True
	>>> is_integer("3.3")
	False
	>>> is_integer("steve jobs")
	False
	"""
	try:
		long(s, 0)
		return True
	except ValueError:
		return False

def align_column(values):
	r"""Left-pad the values so that they line up naturally
	>>> align_column(())
	[]
	>>> def t(i): print '\n'.join(align_column(i.split()))
	>>> t("= += -= == j")
	 =
	+=
	-=
	==
	j
	>>> t("0 1 10 100 0x123f")
	     0
	     1
	    10
	   100
	0x123f
	>>> t("0 100.00 0.9 .9 1.")
	  0
	100.00
	  0.9
	   .9
	  1.
	>>> t("1 2 3")
	1
	2
	3
	"""
	if len(values) == 0:
		return []
	centers = []
	for value in values:
		if re.match('[-=+*/&^%|]?=', value):
			centers.append(len(value)-1)
		elif is_integer(value):
			centers.append(len(value))
		elif value.endswith(',') and is_integer(value[:-1]):
			centers.append(len(value)-1)
		elif re.match(r'[0-9]*\.[0-9]*,?', value) and value != '.':
			centers.append(value.index('.'))
		else:
			centers.append(None)
	assert len(centers) == len(values)

	max_center = max(centers)

	v2 = []
	for i, value in enumerate(values):
		if centers[i] is None:
			v2.append(value)
		else:
			v2.append(" " * (max_center-centers[i]) + value)
	return v2

def pad_column(col):
	"""Make all elements of col the same length by appending spaces
	>>> pad_column(list("abc"))
	['a', 'b', 'c']
	>>> pad_column([])
	[]
	>>> pad_column("a bc def".split())
	['a  ', 'bc ', 'def']
	"""
	if len(col) == 0:
		return []
	width = max(len(s) for s in col)
	return ["%*s" % (-width,s) for s in col]

def whitespace_prefix(s):
	r""" Given a string s, return the longest prefix of s that consists solely
	of whitespace 
	
	>>> whitespace_prefix(' dogs ')
	' '
	>>> whitespace_prefix('\tdogs ')
	'\t'
	>>> whitespace_prefix('dogs')
	''
	>>> whitespace_prefix('')
	''
	>>> whitespace_prefix('    ')
	'    '
	"""
	for i in xrange(len(s)):
		if not s[i].isspace():
			return s[:i]
	return s


def common_prefix(l):
	""" Given a list of strings, return the longest common prefix of all
	strings.  common_prefix([]) == "" by definition. 

	>>> common_prefix([])
	''
	>>> common_prefix(["a","b","c"])
	''
	>>> common_prefix([" a", "  b", "   c"])
	' '
	>>> common_prefix(["", "asdf"])
	''
	>>> common_prefix(["singleton"])
	'singleton'
	"""
	l = iter(l)
	prefix = ""
	try:
		prefix = l.next()
		while len(prefix) > 0:
			string = l.next()
			while not string.startswith(prefix):
				prefix = prefix[:-1]
	except StopIteration:
		pass
	return prefix

def next_cell(s):
	"""Split a string into two parts - the contents of the next cell, and the
	part of the string that comes after the next cell.  A few doc-tests are
	provided in order to better document its interface than I can do with
	prose; integration tests have primary responsiblity for testing this
	function.

	>>> next_cell("a b c d")
	('a', ' b c d')
	>>> next_cell(' b c d')
	('b', ' c d')
	>>> next_cell(' d')
	('d', '')
	>>> next_cell('')
	('', '')
	>>> next_cell(' ')
	('', '')

	"""
	# Skip leading whitespace
	quote_count = 0
	s = s.lstrip()
	for i, ch in enumerate(s):
		if ch == '"':
			if quote_count == 2:
				# There are too many quotes.  Redo this ignoring quotes.
				r = s.split()[0].strip()
				return (r, s[len(r):])
			quote_count += 1
		if ch.isspace() and quote_count != 1:
			return (s[:i], s[i:])
	return (s, "")

def split_row(s, num_cols=None):
	"""Split a row into multiple cells

	>>> split_row("a b c d e f g")
	['a', 'b', 'c', 'd', 'e', 'f', 'g']
	>>> split_row("  a b c d e f g  ")
	['a', 'b', 'c', 'd', 'e', 'f', 'g']
	>>> split_row("")
	[]
	>>> split_row("    ")
	[]

	"""
	row = []
	while True:
		if len(row)+1 == num_cols:
			row.append(s.strip())
			return row
		cell, s = next_cell(s)
		if cell == "":
			return row
		row.append(cell)

class Options(object):
	num_cols     = None
	align_equals = False

def parse_args(args):
	o = Options()
	if len(args) > 2:
		print "Too many arguemnts"
		return None
	if len(args) <= 1:
		return o
	if args[1] == '=':
		o.align_equals = True
	else:
		try: o.num_cols = int(args[1])
		except ValueError:
			print "Unable to parse %r" % args[1]
			return None
	return o

def main(args):
	opts = parse_args(args)
	if opts is None:
		return 1

	lines = sys.stdin.readlines()

	# Determine the prefix and strip it off.  Remove trailing whitespace while
	# we're at it.
	prefix = common_prefix(line for line in lines if line.strip() != "")
	prefix = whitespace_prefix(prefix)
	rows = [split_row(line, opts.num_cols) for line in lines]

	if opts.align_equals:
		equals_columns = [None]*len(rows)
		for i, row in enumerate(rows):
			try: equals_columns[i] = row.index('=') - 1
			except ValueError: pass
		equals_column = max(equals_columns)
		if equals_column is not None:
			for i, row in enumerate(rows):
				eq = equals_columns[i]
				if eq is not None and eq < equals_column:
					cols_to_insert = equals_column-eq
					eq = max(0, eq)
					row[eq:eq] = [""] * cols_to_insert


	# This little gem transposes rows, filling in missing data with "".
	columns = list(itertools.izip_longest(*rows, fillvalue=""))

	for i, col in enumerate(columns):
		col = align_column(col)
		col = pad_column(col)
		columns[i] = col

	# Transpose back to rows to print
	for row in itertools.izip(*columns):
		row_str = ' '.join(row)
		sys.stdout.write(prefix)
		sys.stdout.write(row_str.rstrip())
		sys.stdout.write("\n")

	return 0

if __name__ == "__main__":
	sys.exit(main(sys.argv))
